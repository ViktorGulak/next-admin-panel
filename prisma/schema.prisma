generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
/* 
npx prisma migrate reset - сбрасывает (пересоздаёт бд) и удаляет
все данные из бд. Эту команду необходимо выполнять перед командой 
db push чтобы не возникали конфликты в порядке выполнения операций.  
prisma db push - синхронизирует схему Prisma с БД без истории миграций.
npx prisma migrate dev --name init --create-only - 
Создает SQL-миграции в dev режиме и с именем init, --create-only - говорит
только создать миграцию, но не применять её к бд (если вдруг нужны правки в sql код)
Для применения к бд вызвать npx prisma migrate dev. 
npx prisma generate - генерирует Prisma Client для взаимодействияс бд из кода
Создает Prisma Client, Обновляет типы TypeScript Запускается автоматически при
prisma migrate dev или prisma db push, но если
вручную редактируем schema.prisma (без миграций), 
нужно запустить generate отдельно.
*/

model Branch{
  id      Int      @id @default(autoincrement())
  title   String   @db.VarChar(250)
  addres  String   @db.VarChar(250)
  city    String   @db.VarChar(50)
  clients Client[]
  employees Employee[]
}

model Client {
  id            Int      @id @default(autoincrement())
  surname       String   @db.VarChar(50)
  name          String   @db.VarChar(50)
  patronymic    String   @db.VarChar(50)
  company       String?  @db.VarChar(50) @default("Физ. лицо") 
  phone         String   @db.VarChar(15) @unique
  email         String   @db.VarChar(250) @unique
  personalCode  String   @db.VarChar(15) @unique
  addres        String   @db.VarChar(250)
  mailings      Mailing[]
  branchId      Int      
  branch        Branch   @relation(fields: [branchId], references: [id])
}

enum Role {
  OPERATOR @map("Оператор")
  ADMIN @map("Администратор")
  SUPERVISOR @map("Руководитель")
}
model Employee     {
  id            Int      @id @default(autoincrement())
  surname       String   @db.VarChar(50)
  name          String   @db.VarChar(50)
  patronymic    String   @db.VarChar(50)
  position      String   @db.VarChar(50)  
  phone         String   @db.VarChar(15) @unique
  email         String   @db.VarChar(250) @unique
  login         String   @db.VarChar(25) @unique
  password      String   @db.VarChar(25) @unique
  role          Role     @default(OPERATOR)
  photo         String?  @default("")
  mailings      Mailing[]
  branchId      Int      
  branch        Branch   @relation(fields: [branchId], references: [id])
}

model Mailing{
  id          Int  @id @default(autoincrement())
  dateSending DateTime  @default(now())
  message     String?  
  employeeId  Int      
  employee    Employee   @relation(fields: [employeeId], references: [id])
  clientId    Int      
  client      Client      @relation(fields: [clientId], references: [id]) 
}

